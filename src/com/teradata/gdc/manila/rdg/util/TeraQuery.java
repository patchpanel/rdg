/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.teradata.gdc.manila.rdg.util;

import java.sql.*;
import java.util.ArrayList;

/**
 * @author jl186034
 */
public class TeraQuery {

    private final Connection cn;
    private Statement st;
    private ResultSet rs;
    private ResultSetMetaData rsMetadata;
    private String sql;
    private int colCount;

    public TeraQuery(Connection cn) {
        this.cn = cn;
    }

    public void executeQuery(String sql) throws SQLException {
        this.sql = sql;
        this.st = this.cn.createStatement();
        this.rs = this.st.executeQuery(this.sql);
        this.rsMetadata = this.rs.getMetaData();
        this.colCount = this.rsMetadata.getColumnCount();
    }

    private ResultSetMetaData getRsMetadata() {
        return this.rsMetadata;
    }

    public void closeStatement() throws SQLException {
        this.st.close();
    }

    public ArrayList<String> getPrecisionAndScale() throws SQLException {
        ArrayList<String> columnPaS = new ArrayList<>();
        this.rsMetadata = this.getRsMetadata();
        int i = 1;
        while (i <= colCount) {
            columnPaS.add(Integer.toString(this.rsMetadata.getPrecision(i)) + ',' + Integer.toString(this.rsMetadata.getScale(i)));
            i++;
        }
        return columnPaS;
    }

    public ArrayList<String> getColumnName() throws SQLException {
        ArrayList<String> columnName = new ArrayList<>();
        this.rsMetadata = this.getRsMetadata();
        int i = 1;
        while (i <= colCount) {
            columnName.add(this.rsMetadata.getColumnName(i));
            i++;
        }
        return columnName;
    }

    public ArrayList<String> getColumnType() throws SQLException {
        ArrayList<String> columnTypes = new ArrayList<>();
        this.rsMetadata = this.getRsMetadata();
        int i = 1;
        while (i <= colCount) {
            columnTypes.add(this.rsMetadata.getColumnTypeName(i));
            i++;
        }
        return columnTypes;
    }

    public ArrayList<Integer> getColumnSize() throws SQLException {
        ArrayList<Integer> columnSizes = new ArrayList<>();
        // Performing the SELECT query using Statement.executeQuery
        // method. This method executes a SQL statement that returns
        // a single ResultSet. Only one ResultSet per Statement can
        // be open at any point in time. If the reading of one
        // ResultSet is interleaved with the reading of another,
        // each must have been generated by different Statements.
        // A ResultSet provides access to a table of data generated
        // by executing a Statement. The table rows are retrieved
        // in sequence. Within a row, its column values can be
        // accessed in any order.
        // Retrieve the properties of the ResultSet object.
        // A ResultSetMetaData object can be used to determine
        // the types and properties of the columns in a ResultSet.
        this.rsMetadata = this.getRsMetadata();

        // Retrieve the number of columns returned
        //this.colCount = this.rsMetadata.getColumnCount();

        //System.out.println(" This table has " + colCount + " columns.\n");
        // For every column, display it's information.
        //System.out.println(" Displaying column information: ");
        int i = 1;     // Initialize loop counter
        while (i <= colCount) {
            // This code will demonstrate all available methods for
            // retrieving column meta data.
//            System.out.println();
//            System.out.println(" Column " + i);
//            System.out.println(" ------------ ");
//            // Display the suggested column title for use in
//            // printouts and displays
//            System.out.println(" Column label: "
//                    + rsmd.getColumnLabel(i));
//            // Display the column name
//            System.out.println(" Column name: "
//                    + rsmd.getColumnName(i));
//            // Display the SQL type of a column.
//            System.out.println(" Column type: "
//                    + rsmd.getColumnType(i));
//            // Display the type name of a column
//            System.out.println(" Column type name: "
//                    + rsmd.getColumnTypeName(i));
//            // Display the class name of a column
//            System.out.println(" Column class name: "
//                    + rsmd.getColumnClassName(i));
//            // Display information on whether NULL values are allowed
//            System.out.println(" NULLs allowed: "
//                    + rsmd.isNullable(i));
//            // Display the normal maximum width of a column in characters.
//            System.out.println(" Maximum character width: "
//                    + rsmd.getColumnDisplaySize(i));
//            // Display precision: the number of decimal digits
//            // Note: default value is 0.
//            System.out.println(" Column precision"
//                    + " (number of decimal places): "
//                    + rsmd.getPrecision(i));
//            // Display the number of digits to the right of the
//            // decimal point. Note: default value is 0.
//            System.out.println(" Precision to the right of"
//                    + " the decimal point: "
//                    + rsmd.getScale(i));
//            // Increment column counter
            columnSizes.add(this.rsMetadata.getColumnDisplaySize(i));
            i++;
        }
        return columnSizes;
    }

    public int getColumnCount() {
        return this.colCount;
    }
}
